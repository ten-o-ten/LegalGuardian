#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å Telegram –±–æ—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã.
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π
–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
"""

import os
import logging
import asyncio
from typing import Dict
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from huggingface_hub import login

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from telegram_bot.retriever import LegalRetriever
from telegram_bot.generator import LegalAnswerGenerator, ConversationMemory

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class LegalGuardianBot:
    """
    Telegram –±–æ—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π —Å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º–∏ –∑–∞–∫–æ–Ω–∞–º–∏.
    """
    
    def __init__(
        self,
        telegram_token: str,
        index_path: str,
        chunks_data_path: str,
        llm_model_name: str = "google/gemma-3-4b-it",
        huggingface_token: str = None,
        max_history: int = 8,
        max_chunks: int = 5,
        max_tokens: int = 1024,
        temperature: float = 0.7,
        top_p: float = 0.9
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        
        Args:
            telegram_token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ Telegram
            index_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–Ω–¥–µ–∫—Å–∞ FAISS
            chunks_data_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —á–∞–Ω–∫–∞–º–∏ –∏ —Å—Å—ã–ª–∫–∞–º–∏
            llm_model_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
            huggingface_token: –¢–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥–µ–ª—è–º Hugging Face
            max_history: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            max_chunks: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            max_tokens: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ
            temperature: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            top_p: –ü–∞—Ä–∞–º–µ—Ç—Ä top_p –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        """
        self.telegram_token = telegram_token
        self.index_path = index_path
        self.chunks_data_path = chunks_data_path
        self.llm_model_name = llm_model_name
        self.huggingface_token = huggingface_token
        self.max_history = max_history
        self.max_chunks = max_chunks
        self.max_tokens = max_tokens
        self.temperature = temperature
        self.top_p = top_p
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_conversations: Dict[int, ConversationMemory] = {}
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞
        self.is_initialized = False
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self.stats = {
            "total_queries": 0,
            "legal_queries": 0,
            "start_time": datetime.now()
        }
    
    async def initialize(self):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞ (retriever –∏ generator)
        """
        if self.is_initialized:
            logger.info("–ë–æ—Ç —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        
        try:
            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Hugging Face Hub
            if self.huggingface_token:
                login(token=self.huggingface_token)
                logger.info("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Hugging Face Hub —É—Å–ø–µ—à–Ω–∞")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LegalRetriever...")
            self.retriever = LegalRetriever(
                index_path=self.index_path,
                chunks_data_path=self.chunks_data_path,
                top_k=self.max_chunks
            )
            
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LegalAnswerGenerator...")
            self.generator = LegalAnswerGenerator(
                model_name=self.llm_model_name,
                max_tokens=self.max_tokens,
                temperature=self.temperature,
                top_p=self.top_p,
                huggingface_token=self.huggingface_token,
                max_chunks=self.max_chunks
            )
            
            self.is_initialized = True
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
            import traceback
            traceback.print_exc()
            raise
    
    def get_conversation_memory(self, user_id: int) -> ConversationMemory:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ ConversationMemory –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            
        Returns:
            –û–±—ä–µ–∫—Ç ConversationMemory –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if user_id not in self.user_conversations:
            self.user_conversations[user_id] = ConversationMemory(max_history=self.max_history)
        return self.user_conversations[user_id]
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
        """
        user_id = update.effective_user.id
        username = update.effective_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_conversations[user_id] = ConversationMemory(max_history=self.max_history)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_message = (
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {username}! üëã\n\n"
            "–Ø - —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç LegalGuardian. –ú–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, "
            "—Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ:\n"
            "‚Ä¢ –ø—Ä–∞–≤–∞—Ö –∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—è—Ö –≥—Ä–∞–∂–¥–∞–Ω\n"
            "‚Ä¢ –Ω–æ—Ä–º–∞—Ö –∏ –ø–æ–ª–æ–∂–µ–Ω–∏—è—Ö –∑–∞–∫–æ–Ω–æ–≤\n"
            "‚Ä¢ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö\n"
            "‚Ä¢ –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏–∏\n"
            "‚Ä¢ —Ç—Ä—É–¥–æ–≤–æ–º, —Å–µ–º–µ–π–Ω–æ–º, –∂–∏–ª–∏—â–Ω–æ–º, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–º –ø—Ä–∞–≤–µ\n\n"
            "–î–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /clear.\n"
            "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É, –≤–≤–µ–¥–∏—Ç–µ /help.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å."
        )
        
        await update.message.reply_text(welcome_message)
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} ({username})")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
        """
        help_message = (
            "üîç *LegalGuardian - —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç*\n\n"
            "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
            "/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞\n\n"
            
            "*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n"
            "‚Ä¢ –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º\n"
            "‚Ä¢ –Ø –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–æ–≤—ã–µ –Ω–æ—Ä–º—ã\n"
            "‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —Ä–∞–º–∫–∞—Ö –¥–∏–∞–ª–æ–≥–∞\n\n"
            
            "*–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*\n"
            "‚Ä¢ –Ø –Ω–µ –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n"
            "‚Ä¢ –ú–æ–∏ –æ—Ç–≤–µ—Ç—ã –Ω–µ –∑–∞–º–µ–Ω—è—é—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —é—Ä–∏—Å—Ç–∞\n"
            "‚Ä¢ –Ø —Ä–∞–±–æ—Ç–∞—é —Å –æ–±—â–∏–º–∏ –Ω–æ—Ä–º–∞–º–∏ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞\n\n"
            
            "–ü—Ä–∏ —Å–ª–æ–∂–Ω—ã—Ö —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —é—Ä–∏—Å—Ç—É."
        )
        
        await update.message.reply_text(help_message, parse_mode="Markdown")
    
    async def clear_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /clear - –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        """
        user_id = update.effective_user.id
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if user_id in self.user_conversations:
            self.user_conversations[user_id].clear()
        else:
            self.user_conversations[user_id] = ConversationMemory(max_history=self.max_history)
        
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –±–µ—Å–µ–¥—É.")
        logger.info(f"–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats - –ø–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞
        """
        uptime = datetime.now() - self.stats["start_time"]
        uptime_str = str(uptime).split('.')[0]  # –£–¥–∞–ª—è–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        
        legal_percentage = 0
        if self.stats["total_queries"] > 0:
            legal_percentage = (self.stats["legal_queries"] / self.stats["total_queries"]) * 100
        
        stats_message = (
            "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n"
            f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime_str}\n"
            f"–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {self.stats['total_queries']}\n"
            f"–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {self.stats['legal_queries']} ({legal_percentage:.1f}%)\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.user_conversations)}\n"
        )
        
        await update.message.reply_text(stats_message, parse_mode="Markdown")
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if not self.is_initialized:
            await update.message.reply_text(
                "–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å..."
            )
            await self.initialize()
            return
        
        user_id = update.effective_user.id
        query = update.message.text
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats["total_queries"] += 1
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        conversation_memory = self.get_conversation_memory(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        await update.message.chat.send_action("typing")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–æ–º
            is_legal = self.retriever.is_legal_question(query)
            
            if not is_legal:
                await update.message.reply_text(
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º. "
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, –∫–∞—Å–∞—é—â–∏–π—Å—è –ø—Ä–∞–≤–æ–≤—ã—Ö –Ω–æ—Ä–º, –∑–∞–∫–æ–Ω–æ–≤ –∏–ª–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä."
                )
                logger.info(f"–ù–µ—é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{query}'")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            self.stats["legal_queries"] += 1
            
            # –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            retrieved_chunks = self.retriever.search(query, is_legal_question=True)
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            if not retrieved_chunks:
                await update.message.reply_text(
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –≤ –º–æ–µ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π. "
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å."
                )
                logger.info(f"–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{query}'")
                return
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            answer = self.generator.generate_answer(
                user_query=query,
                retrieved_chunks=retrieved_chunks,
                conversation_memory=conversation_memory
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞
            if not self.generator.is_legal_answer(query, answer):
                # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞—á–µ—Å—Ç–≤–∞
                await update.message.reply_text(
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ—é—â–µ–π—Å—è —É –º–µ–Ω—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. "
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç."
                )
                logger.warning(f"–û—Ç–≤–µ—Ç –Ω–∏–∑–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{query}'")
                return
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await update.message.reply_text(answer)
            logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å."
            )
    
    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {context.error}")
        if update and isinstance(update, Update) and update.effective_chat:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    def run(self):
        """
        –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        """
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
        application = Application.builder().token(self.telegram_token).build()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞
        asyncio.run(self.initialize())
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("clear", self.clear_command))
        application.add_handler(CommandHandler("stats", self.stats_command))
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
        application.add_error_handler(self.error_handler)
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        application.run_polling()


def initialize_bot(
    telegram_token: str = None,
    index_path: str = None,
    chunks_data_path: str = None,
    llm_model_name: str = "google/gemma-3-4b-it",
    huggingface_token: str = None
):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
    
    Args:
        telegram_token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ Telegram
        index_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–Ω–¥–µ–∫—Å–∞ FAISS
        chunks_data_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —á–∞–Ω–∫–∞–º–∏ –∏ —Å—Å—ã–ª–∫–∞–º–∏
        llm_model_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
        huggingface_token: –¢–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥–µ–ª—è–º Hugging Face
    
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏ –ø—É—Ç–µ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã —è–≤–Ω–æ
    telegram_token = telegram_token or os.environ.get("TELEGRAM_TOKEN")
    index_path = index_path or os.environ.get("INDEX_PATH")
    chunks_data_path = chunks_data_path or os.environ.get("CHUNKS_DATA_PATH")
    huggingface_token = huggingface_token or os.environ.get("HUGGINGFACE_TOKEN")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if not telegram_token:
        raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω Telegram. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç –∏–ª–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN.")
    
    if not index_path:
        raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ –∏–Ω–¥–µ–∫—Å—É FAISS. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç –∏–ª–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è INDEX_PATH.")
    
    if not chunks_data_path:
        raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —á–∞–Ω–∫–∞–º–∏. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç –∏–ª–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è CHUNKS_DATA_PATH.")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
    try:
        bot = LegalGuardianBot(
            telegram_token=telegram_token,
            index_path=index_path,
            chunks_data_path=chunks_data_path,
            llm_model_name=llm_model_name,
            huggingface_token=huggingface_token,
            max_history=int(os.environ.get("MAX_HISTORY", 8)),
            max_chunks=int(os.environ.get("MAX_CHUNKS", 5)),
            max_tokens=int(os.environ.get("MAX_TOKENS", 1024)),
            temperature=float(os.environ.get("TEMPERATURE", 0.7)),
            top_p=float(os.environ.get("TOP_P", 0.9))
        )
        
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return bot
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        raise


def run_bot():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    """
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        bot = initialize_bot()
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        bot.run()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    run_bot() 